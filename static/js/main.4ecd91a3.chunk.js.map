{"version":3,"sources":["minesweeper-logic.js","ms-react.js","serviceWorker.js","index.js"],"names":["CELL_VALUE","Object","freeze","BOMB","EMPTY","CELL_STATE","COVERED","FLAGGED","REVEALED","EXPLODED","GAME_STATE","PLAYING","LOSS","WIN","DIFFICULTY","BEGINNER","INTERMEDIATE","EXPERT","CUSTOM","Cell","value","state","this","MinesweeperGameState","rows","cols","bombCount","gameState","bombField","bombs","firstMoveMade","i","row","j","push","col","validRow","validCol","adjacentCells","row1","row2","col1","col2","cell","copy","length","difficulty","validInput","newGameState","r","c","Math","floor","random","getAdjacentCells","forEach","elem","bomb","cellsToCheck1","r1","c1","checkCell","cellsToCheck2","r2","c2","checkCell2","splice","checkForWin","Tile","className","props","tileClass","onClick","onContextMenu","disabled","innerTile","React","Component","Board","console","log","e","boardRows","key","renderTile","SIDEBAR_PANEL","DEVELOPMENT","HOW_TO_PLAY","NEW_GAME_SETTINGS","CLICK_STATE","SWEEP","FLAG","EMOJI_STATE","NEUTRAL","OPEN_MOUTH","SCREAM","SMILE","SMILE_SUNGLASSES","Game","safeConstructor","rowInput","colInput","bombInput","sidebarOpen","sidebarPanel","timer","activeTimer","timerFunc","flagCounter","clickState","emojiState","handleSliderChange","bind","handleDifficultyButton","handleNewGameButton","handleEmojiButton","handleSidebarPanelSwitch","toggleSidebar","toggleClickState","event","slider","target","id","setState","confirmation","window","confirm","alert","clearInterval","preventDefault","newEmojiState","type","sweep","setInterval","tick","flag","newClickState","sidebarStyle","transform","toggleText","renderHowToPlayPanel","settingsStyle","howToPlayStyle","devStyle","renderSettingsPanel","renderDevPanel","style","href","min","max","onChange","toRender","output","toString","emoji","role","aria-label","icon","renderCounter","renderEmoji","renderClickState","handleBoardClick","renderSidebar","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4ecd91a3.chunk.js","sourcesContent":["\r\nexport const CELL_VALUE = Object.freeze({\r\n    BOMB: \"bomb\",\r\n    EMPTY: \"empty\",\r\n});\r\n\r\nexport const CELL_STATE = Object.freeze({\r\n    COVERED: \"covered\", \r\n    FLAGGED: \"flagged\", \r\n    REVEALED: \"revealed\", \r\n    EXPLODED: \"exploded\",\r\n});\r\n\r\nexport const GAME_STATE = Object.freeze({\r\n    PLAYING: \"playing\", \r\n    LOSS: \"loss\", \r\n    WIN: \"win\",\r\n});\r\n\r\nexport const DIFFICULTY = Object.freeze({\r\n    BEGINNER: \"Beginner\",\r\n    INTERMEDIATE: \"Intermediate\",\r\n    EXPERT: \"Expert\",\r\n    CUSTOM: \"Custom\",\r\n})\r\n\r\nclass Cell {\r\n    constructor(value=CELL_VALUE.EMPTY, state=CELL_STATE.COVERED) {\r\n        this.value = value; // Value should be a value of CELL_VALUE or a number 1-8\r\n        this.state = state; // State should be a value of CELL_STATE\r\n    }\r\n}\r\nexport class MinesweeperGameState {\r\n    constructor(rows=9, cols=9, bombCount=10) {\r\n        this.rows = rows;\r\n        this.cols = cols;\r\n        this.bombCount = bombCount;\r\n        this.gameState = GAME_STATE.PLAYING; \r\n        this.bombField = [];\r\n        this.bombs = [];\r\n        this.firstMoveMade = false;\r\n        for(let i = 0; i < rows; i++) {\r\n            let row = [];\r\n            for(let j = 0; j < cols; j++) {\r\n                row.push(new Cell());\r\n            }\r\n            this.bombField.push(row);\r\n        }\r\n    }\r\n\r\n    validRow(row) {\r\n        return row >= 0 && row < this.rows;\r\n    }\r\n\r\n    validCol(col) {\r\n        return col >= 0 && col < this.cols;\r\n    }\r\n\r\n    getAdjacentCells(row, col) {\r\n        if(!this.validRow(row) || !this.validCol(col)) {\r\n            return -1;\r\n        }\r\n        let adjacentCells = [];\r\n        let row1 = row - 1;\r\n        let row2 = row + 1;\r\n        let col1 = col - 1;\r\n        let col2 = col + 1;\r\n        if(this.validRow(row1)) {\r\n            if(this.validCol(col1)) {\r\n                adjacentCells.push([row1, col1]); // Top Left\r\n            }\r\n            if(this.validCol(col2)) {\r\n                adjacentCells.push([row1, col2]); // Top Right\r\n            }\r\n            adjacentCells.push([row1, col]); // Top Middle\r\n        }\r\n        if(this.validRow(row2)) {\r\n            if(this.validCol(col1)) {\r\n                adjacentCells.push([row2, col1]); // Bottom Left\r\n            }\r\n            if(this.validCol(col2)) {\r\n                adjacentCells.push([row2, col2]); // Bottom Right\r\n            }\r\n            adjacentCells.push([row2, col]); // Bottom Middle\r\n        }\r\n        if(this.validCol(col1)) {\r\n            adjacentCells.push([row, col1]); // Middle Left\r\n        }\r\n        if(this.validCol(col2)) {\r\n            adjacentCells.push([row, col2]); // Middle Right\r\n        }\r\n\r\n        return adjacentCells;\r\n    }\r\n    \r\n    checkForWin() {\r\n        for(let i = 0; i < this.rows; i++) {\r\n            for(let j = 0; j < this.cols; j++) {\r\n                let cell = this.bombField[i][j];\r\n                if(cell.value !== CELL_VALUE.BOMB && cell.state !== CELL_STATE.REVEALED) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    copy() {\r\n        let copy = new MinesweeperGameState(this.rows, this.cols, this.bombCount);\r\n        copy.gameState = this.gameState;\r\n        copy.bombs = [];\r\n        for(let i = 0; i < this.bombs.length; i++) {\r\n            copy.bombs.push([...this.bombs[i]]);\r\n        }\r\n        for(let i = 0; i < this.rows; i++) {\r\n            for(let j = 0; j < this.cols; j++) {\r\n                copy.bombField[i][j].value = this.bombField[i][j].value;\r\n                copy.bombField[i][j].state = this.bombField[i][j].state;\r\n            }\r\n        }\r\n        copy.firstMoveMade = this.firstMoveMade;\r\n        return copy;\r\n    }\r\n\r\n    static safeConstructor(difficulty=DIFFICULTY.BEGINNER, row=9, col=9, bombCount=10) {\r\n        if(difficulty === DIFFICULTY.BEGINNER) {\r\n            row = 9;\r\n            col = 9;\r\n            bombCount = 10;\r\n        } else if(difficulty === DIFFICULTY.INTERMEDIATE) {\r\n            row = 16;\r\n            col = 16;\r\n            bombCount = 40;\r\n        } else if(difficulty === DIFFICULTY.EXPERT) {\r\n            row = 16;\r\n            col = 30;\r\n            bombCount = 99;\r\n        } else if(difficulty === DIFFICULTY.CUSTOM) {\r\n            if(row <= 0 || col <= 0 || bombCount <= 0 || (row * col) <= bombCount) {\r\n                return -1;\r\n            }\r\n        } else {\r\n            return 0;\r\n        }\r\n\r\n        return new MinesweeperGameState(row, col, bombCount);\r\n    }\r\n\r\n    static validInput(gameState, row, col) {\r\n        return gameState instanceof MinesweeperGameState && gameState.validRow(row) && gameState.validCol(col);\r\n    }\r\n\r\n    static sweep(gameState, row, col) {\r\n        if(!this.validInput(gameState, row, col)) {\r\n            return 0;\r\n        }\r\n        if(gameState.gameState !== GAME_STATE.PLAYING || \r\n            gameState.bombField[row][col].state === CELL_STATE.REVEALED || \r\n            gameState.bombField[row][col].state === CELL_STATE.FLAGGED) {\r\n            return -1;\r\n        }\r\n        let newGameState = gameState.copy();\r\n        if(!newGameState.firstMoveMade) {\r\n            // Wipe flags\r\n            for(let r = 0; r < newGameState.rows; r++) {\r\n                for(let c = 0; c < newGameState.cols; c++) {\r\n                    newGameState.bombField[r][c].state = CELL_STATE.COVERED;\r\n                }\r\n            }\r\n            // Populate bombField\r\n            while(newGameState.bombs.length < newGameState.bombCount) {\r\n                let r = Math.floor(Math.random() * newGameState.rows);\r\n                let c = Math.floor(Math.random() * newGameState.cols);\r\n                if((r !== row && c !== col) && newGameState.bombField[r][c].value !== CELL_VALUE.BOMB) {\r\n                    newGameState.bombField[r][c].value = CELL_VALUE.BOMB;\r\n                    newGameState.bombs.push([r, c]);\r\n                    let adjacentCells = newGameState.getAdjacentCells(r, c);\r\n                    adjacentCells.forEach(elem => {\r\n                        let cell = newGameState.bombField[elem[0]][elem[1]];\r\n                        if(cell.value === CELL_VALUE.EMPTY) {\r\n                            cell.value = 1;\r\n                        } else if (cell.value !== CELL_VALUE.BOMB) { // value is a number\r\n                            cell.value++;\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            newGameState.firstMoveMade = true;\r\n        }\r\n        let cell = newGameState.bombField[row][col];\r\n        if(cell.value === CELL_VALUE.BOMB) {\r\n            cell.state = CELL_STATE.EXPLODED;\r\n            newGameState.gameState = GAME_STATE.LOSS;\r\n            // Reveal Bomb\r\n            let bombs = newGameState.bombs;\r\n            bombs.forEach(elem => {\r\n                let bomb = newGameState.bombField[elem[0]][elem[1]];\r\n                if(bomb.state === CELL_STATE.COVERED) {\r\n                    bomb.state = CELL_STATE.REVEALED;\r\n                }\r\n            });\r\n        } else {\r\n            cell.state = CELL_STATE.REVEALED;\r\n            if(cell.value === CELL_VALUE.EMPTY) {\r\n                // Recursive sweep\r\n                let cellsToCheck1 = newGameState.getAdjacentCells(row, col);\r\n                for(let i = 0; i < cellsToCheck1.length; i++) {\r\n                    let r1 = cellsToCheck1[i][0];\r\n                    let c1 = cellsToCheck1[i][1];\r\n                    let checkCell = newGameState.bombField[r1][c1];\r\n                    if(checkCell.value !== CELL_VALUE.BOMB) {\r\n                        checkCell.state = CELL_STATE.REVEALED;\r\n                        if(checkCell.value === CELL_VALUE.EMPTY) {\r\n                            let cellsToCheck2 = newGameState.getAdjacentCells(r1, c1);\r\n                            for(let j = 0; j < cellsToCheck2.length; j++) {\r\n                                let r2 = cellsToCheck2[j][0];\r\n                                let c2 = cellsToCheck2[j][1];\r\n                                let checkCell2 = newGameState.bombField[r2][c2];\r\n                                if(checkCell2.state === CELL_STATE.REVEALED || \r\n                                    checkCell2.state === CELL_STATE.FLAGGED || \r\n                                    checkCell2.value === CELL_VALUE.BOMB) {\r\n                                    cellsToCheck2.splice(j, 1);\r\n                                    j--;\r\n                                } else {\r\n                                    cellsToCheck1.push([r2, c2]);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if(newGameState.checkForWin()) {\r\n                newGameState.gameState = GAME_STATE.WIN;\r\n            }\r\n        }\r\n\r\n        return newGameState;\r\n    }\r\n\r\n    static flag(gameState, row, col) {\r\n        if(!this.validInput(gameState, row, col)) {\r\n            return 0;\r\n        }\r\n        if(gameState.gameState !== GAME_STATE.PLAYING || \r\n            gameState.bombField[row][col].state === CELL_STATE.REVEALED) {\r\n            return -1;\r\n        }\r\n        let newGameState = gameState.copy();\r\n\r\n        let cell = newGameState.bombField[row][col];\r\n        if(cell.state === CELL_STATE.COVERED) {\r\n            cell.state = CELL_STATE.FLAGGED;\r\n        } else if(cell.state === CELL_STATE.FLAGGED) {\r\n            cell.state = CELL_STATE.COVERED;\r\n        }\r\n\r\n        return newGameState;\r\n    }\r\n}\r\n\r\nexport default {MinesweeperGameState, CELL_STATE, CELL_VALUE, GAME_STATE, DIFFICULTY};","import React from 'react';\r\n\r\nimport './css-reset.css';\r\nimport './ms-styles.css';\r\nimport {MinesweeperGameState, CELL_STATE, CELL_VALUE, GAME_STATE, DIFFICULTY} from './minesweeper-logic';\r\n\r\nclass Tile extends React.Component {\r\n    render() {\r\n        return (\r\n            <button \r\n                className={this.props.tileClass} \r\n                onClick={this.props.onClick}\r\n                onContextMenu={this.props.onClick}\r\n                disabled={this.props.disabled}\r\n            >\r\n                <div className={this.props.innerTile}>\r\n                    {this.props.value}\r\n                </div>\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nclass Board extends React.Component {\r\n    renderTile(row, col) {\r\n        let cell = this.props.bombField[row][col];\r\n        let value = \"\";\r\n        let tileClass = \"tile\";\r\n        let innerTile = \"\";\r\n        let disabled = false;\r\n        if(this.props.gameState !== GAME_STATE.PLAYING) {\r\n            disabled = true;\r\n        }\r\n        if(cell.state === CELL_STATE.FLAGGED) {\r\n            innerTile = \"flag\";\r\n            tileClass += \" covered\";\r\n        } else if(cell.state === CELL_STATE.EXPLODED) {\r\n            tileClass += \" exploded\";\r\n            innerTile = \"bomb\";\r\n            disabled = true;\r\n        } else if(cell.state === CELL_STATE.COVERED) {\r\n            tileClass += \" covered\";\r\n        } else { // cell.state === CELL_STATE.REVEALED\r\n            tileClass += \" revealed\";\r\n            disabled = true;\r\n            innerTile = \"number\"\r\n            value = cell.value;\r\n            switch(cell.value) {\r\n                case CELL_VALUE.EMPTY:\r\n                    innerTile = \"\";\r\n                    value = \"\";\r\n                    break;\r\n                case CELL_VALUE.BOMB:\r\n                    innerTile = \"bomb\";\r\n                    value = \"\";\r\n                    break;\r\n                case 1:\r\n                    innerTile += \" one\";\r\n                    break;\r\n                case 2:\r\n                    innerTile += \" two\";\r\n                    break;\r\n                case 3:\r\n                    innerTile += \" three\";\r\n                    break;\r\n                case 4:\r\n                    innerTile += \" four\";\r\n                    break;\r\n                case 5:\r\n                    innerTile += \" five\";\r\n                    break;\r\n                case 6:\r\n                    innerTile += \" six\";\r\n                    break;\r\n                case 7:\r\n                    innerTile += \" seven\";\r\n                    break;\r\n                case 8:\r\n                    innerTile += \" eight\";\r\n                    break;\r\n                default:\r\n                    console.log();\r\n            }\r\n        }\r\n        \r\n        return (\r\n            <Tile \r\n                tileClass={tileClass} \r\n                innerTile={innerTile} \r\n                value={value} \r\n                onClick={(e) => this.props.onClick(e, row, col)}\r\n                disabled={disabled}\r\n            />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const boardRows = [];\r\n        for(let i = 0; i < this.props.rows; i++) {\r\n            let row = [];\r\n            for(let j = 0; j < this.props.cols; j++) {\r\n                row.push(<div key={j} className=\"cell\">{this.renderTile(i, j)}</div>);\r\n            }\r\n            boardRows.push(\r\n                <div key={i} className=\"board-row\">\r\n                    {row}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className=\"board\">\r\n                {boardRows}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst SIDEBAR_PANEL = Object.freeze({\r\n    DEVELOPMENT: \"Development\",\r\n    HOW_TO_PLAY: \"How to Play\",\r\n    NEW_GAME_SETTINGS: \"New Game Settings\",\r\n});\r\n\r\nconst CLICK_STATE = Object.freeze({\r\n    SWEEP: \"sweep\",\r\n    FLAG: \"flag\",\r\n});\r\n\r\nconst EMOJI_STATE = Object.freeze({\r\n    NEUTRAL: \"neutral\",\r\n    OPEN_MOUTH: \"open mouth\",\r\n    SCREAM: \"scream\",\r\n    SMILE: \"smile\",\r\n    SMILE_SUNGLASSES: \"smile with sunglasses\",\r\n});\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            gameState: MinesweeperGameState.safeConstructor(),\r\n            rowInput: 9,\r\n            colInput: 9,\r\n            bombInput: 10,\r\n            difficulty: DIFFICULTY.BEGINNER,\r\n            sidebarOpen: false,\r\n            sidebarPanel: SIDEBAR_PANEL.HOW_TO_PLAY,\r\n            timer: 0,\r\n            activeTimer: false,\r\n            timerFunc: null,\r\n            flagCounter: 10,\r\n            clickState: CLICK_STATE.SWEEP,\r\n            emojiState: EMOJI_STATE.NEUTRAL,\r\n        }\r\n        this.handleSliderChange = this.handleSliderChange.bind(this);\r\n        this.handleDifficultyButton = this.handleDifficultyButton.bind(this);\r\n        this.handleNewGameButton = this.handleNewGameButton.bind(this);\r\n        this.handleEmojiButton = this.handleEmojiButton.bind(this);\r\n        this.handleSidebarPanelSwitch = this.handleSidebarPanelSwitch.bind(this);\r\n        this.toggleSidebar = this.toggleSidebar.bind(this);\r\n        this.toggleClickState = this.toggleClickState.bind(this);\r\n    }\r\n\r\n    handleSliderChange(event) {\r\n        let slider = event.target\r\n        if(slider.id === \"rowInput\") {\r\n            this.setState({\r\n                rowInput: slider.value,\r\n            });\r\n        } else if(slider.id === \"colInput\") {\r\n            this.setState({\r\n                colInput: slider.value,\r\n            });\r\n        } else if(slider.id === \"bombInput\") {\r\n            this.setState({\r\n                bombInput: slider.value,\r\n            });\r\n        } else {\r\n            console.log(\"Unintended event!\");\r\n        }\r\n        this.setState({\r\n            difficulty: DIFFICULTY.CUSTOM,\r\n        });\r\n    }\r\n\r\n    handleDifficultyButton(event) {\r\n        let difficulty = event.target.value;\r\n        if(difficulty === DIFFICULTY.BEGINNER) {\r\n            this.setState({\r\n                rowInput: 9,\r\n                colInput: 9,\r\n                bombInput: 10,\r\n                difficulty: DIFFICULTY.BEGINNER,\r\n            });\r\n        } else if(difficulty === DIFFICULTY.INTERMEDIATE) {\r\n            this.setState({\r\n                rowInput: 16,\r\n                colInput: 16,\r\n                bombInput: 40,\r\n                difficulty: DIFFICULTY.INTERMEDIATE,\r\n            });\r\n        } else if(difficulty === DIFFICULTY.EXPERT) {\r\n            this.setState({\r\n                rowInput: 16,\r\n                colInput: 30,\r\n                bombInput: 99,\r\n                difficulty: DIFFICULTY.EXPERT,\r\n            });\r\n        } else {\r\n            console.log(\"Unintended event for difficulty selector!\");\r\n        }\r\n    }\r\n\r\n    handleNewGameButton(event) {\r\n        let confirmation = true;\r\n        if(this.state.gameState.gameState === GAME_STATE.PLAYING) {\r\n            confirmation = window.confirm(\"Currently playing a game! Are you sure you want to create a new game?\");\r\n        }\r\n        if(confirmation) {\r\n            let newGameState = MinesweeperGameState.safeConstructor(this.state.difficulty, this.state.rowInput, this.state.colInput, this.state.bombInput);\r\n            if(newGameState === -1) {\r\n                console.log(\"Invalid input for either rows, columns, or bombs!\");\r\n                alert(\"Could not create new game! Number of bombs exceeds number of possible spaces! Lower bomb count or increase the number of rows/columns.\");\r\n                return;\r\n            } else if (newGameState === 0) {\r\n                console.log(\"Invalid difficulty input!\");\r\n                return;\r\n            } else { // Valid newGameState created\r\n                clearInterval(this.state.timerFunc);\r\n                this.setState({\r\n                    gameState: newGameState,\r\n                    timer: 0,\r\n                    activeTimer: false,\r\n                    timerFunc: null,\r\n                    flagCounter: this.state.bombInput,\r\n                    emojiState: EMOJI_STATE.NEUTRAL,\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    handleBoardClick(e, r, c) {\r\n        e.preventDefault();\r\n        let gameState = this.state.gameState;\r\n        if(gameState.gameState !== GAME_STATE.PLAYING) {\r\n            return;\r\n        }\r\n        let newGameState;\r\n        let newEmojiState = EMOJI_STATE.SMILE;\r\n        if(e.type === 'click' && this.state.clickState === CLICK_STATE.SWEEP) {\r\n            newGameState = MinesweeperGameState.sweep(gameState, r, c);\r\n            if(!this.state.activeTimer \r\n                && newGameState.gameState === GAME_STATE.PLAYING) {\r\n                this.setState({\r\n                    activeTimer: true,\r\n                    timerFunc: setInterval(() => this.tick(), 1000),\r\n                    flagCounter: this.state.gameState.bombCount,\r\n                })\r\n            }\r\n        } else { // (e.type === 'contextmenu')\r\n            newEmojiState = EMOJI_STATE.NEUTRAL;\r\n            let flagCounter = this.state.flagCounter;\r\n            if(gameState.bombField[r][c].state === CELL_STATE.COVERED) {\r\n                if(this.state.flagCounter === 0) {\r\n                    return;\r\n                }\r\n                flagCounter--;\r\n            } else {\r\n                flagCounter++;\r\n            }\r\n            newGameState = MinesweeperGameState.flag(gameState, r, c);\r\n            this.setState({\r\n                flagCounter: flagCounter,\r\n            });\r\n        }    \r\n        if(newGameState === 0) {\r\n            console.log(\"Invalid input!\");\r\n            return;\r\n        }\r\n        if(newGameState === -1) {\r\n            console.log(\"Invalid move!\");\r\n            return;\r\n        }\r\n        if(newGameState.gameState === GAME_STATE.WIN) {\r\n            newEmojiState = EMOJI_STATE.SMILE_SUNGLASSES;\r\n        } else if(newGameState.gameState === GAME_STATE.LOSS) {\r\n            newEmojiState = EMOJI_STATE.SCREAM;\r\n        }\r\n        this.setState({\r\n            gameState: newGameState,\r\n            emojiState: newEmojiState,\r\n        });\r\n\r\n        if(newGameState.gameState !== GAME_STATE.PLAYING) {\r\n            clearInterval(this.state.timerFunc);\r\n            this.setState({\r\n                activeTimer: false,\r\n                timerFunc: null,\r\n            })\r\n        }\r\n    }\r\n\r\n    handleSidebarPanelSwitch(event) {\r\n        if(event.target.value === this.state.sidebarPanel) {\r\n            return;\r\n        }\r\n        this.setState({\r\n            sidebarPanel: event.target.value\r\n        });\r\n    }\r\n\r\n    handleEmojiButton() {\r\n        this.toggleSidebar();\r\n        this.setState({\r\n            sidebarPanel: SIDEBAR_PANEL.NEW_GAME_SETTINGS,\r\n        });\r\n        if(this.state.gameState.gameState === GAME_STATE.PLAYING) {\r\n            this.setState({\r\n                emojiState: EMOJI_STATE.OPEN_MOUTH,\r\n            });\r\n        }\r\n    }\r\n\r\n    toggleSidebar() {\r\n        this.setState({\r\n            sidebarOpen: !this.state.sidebarOpen,\r\n        })\r\n    }\r\n\r\n    toggleClickState() {\r\n        let newClickState;\r\n        if(this.state.clickState === CLICK_STATE.SWEEP) {\r\n            newClickState = CLICK_STATE.FLAG;\r\n        } else {\r\n            newClickState = CLICK_STATE.SWEEP;\r\n        }\r\n        this.setState({\r\n            clickState: newClickState,\r\n        });\r\n    }\r\n\r\n    tick() {\r\n        this.setState({\r\n            timer: this.state.timer + 1,\r\n        });\r\n    }\r\n\r\n    renderSidebar() { \r\n        let sidebarStyle = {\r\n            transform: \"translateX(295px)\",\r\n        };\r\n        if(this.state.sidebarOpen) {\r\n            sidebarStyle = {\r\n                transform: \"translateX(0px)\",\r\n            };\r\n        }\r\n\r\n        let toggleText = \"<<\";\r\n        if(this.state.sidebarOpen) {\r\n            toggleText = \">>\";\r\n        }\r\n\r\n        let sidebarPanel = this.renderHowToPlayPanel();\r\n        let settingsStyle = \"\";\r\n        let howToPlayStyle = \"\";\r\n        let devStyle = \"\";\r\n        switch(this.state.sidebarPanel) {\r\n            case SIDEBAR_PANEL.NEW_GAME_SETTINGS:\r\n                settingsStyle = \"selected\";\r\n                sidebarPanel = this.renderSettingsPanel();\r\n                break;\r\n            case SIDEBAR_PANEL.DEVELOPMENT:\r\n                devStyle = \"selected\";\r\n                sidebarPanel = this.renderDevPanel();\r\n                break;\r\n            default: // SIDEBAR_PANEL.HOW_TO_PLAY\r\n                howToPlayStyle = \"selected\";\r\n                break;\r\n        }\r\n\r\n        return (\r\n            <div className=\"sidebar\" style={sidebarStyle}>\r\n                <button \r\n                    className=\"sidebar-toggle\"\r\n                    onClick={this.toggleSidebar}\r\n                >\r\n                    {toggleText}\r\n                </button>\r\n                <div className=\"sidebar-nav\">\r\n                    <button \r\n                        className={howToPlayStyle}\r\n                        onClick={this.handleSidebarPanelSwitch}\r\n                        value={SIDEBAR_PANEL.HOW_TO_PLAY}\r\n                    >\r\n                        {SIDEBAR_PANEL.HOW_TO_PLAY}\r\n                    </button>\r\n                    <button \r\n                        className={settingsStyle}\r\n                        onClick={this.handleSidebarPanelSwitch}\r\n                        value={SIDEBAR_PANEL.NEW_GAME_SETTINGS}\r\n                    >\r\n                        {SIDEBAR_PANEL.NEW_GAME_SETTINGS}\r\n                    </button>\r\n                    <button\r\n                        className={devStyle}\r\n                        onClick={this.handleSidebarPanelSwitch}\r\n                        value={SIDEBAR_PANEL.DEVELOPMENT}\r\n                    >\r\n                        {SIDEBAR_PANEL.DEVELOPMENT}\r\n                    </button>\r\n                </div>\r\n                {sidebarPanel}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderHowToPlayPanel() {\r\n        return (\r\n            <div className=\"sidebar-panel\">\r\n                <h1>Minesweeper</h1>\r\n                <h2>Quickstart</h2>\r\n                <p>\r\n                    If you are familiar with how to play Minesweeper already, view these instructions to quickly start playing.\r\n                    Otherwise, please read the <strong>how to play</strong> below.\r\n                </p>\r\n                <h3>For mouse users:</h3>\r\n                <p>\r\n                    <strong>Left Click</strong> to <strong>sweep</strong> the field.\r\n                    <strong>Right Click</strong> to place a <strong>flag</strong>.\r\n                </p>\r\n                <h3>For touchscreen users:</h3>\r\n                <p>\r\n                     <strong>Tap</strong> to either <strong>sweep</strong> or place a <strong>flag</strong>.\r\n                </p>\r\n                <h2>How to Play</h2>\r\n                <a href=\"https://en.wikipedia.org/wiki/Minesweeper_(video_game)#Gameplay\">\r\n                    Placeholder link for how to play\r\n                </a>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderDevPanel() {\r\n        return (\r\n            <div className=\"sidebar-panel\">\r\n                Placeholder text\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderSettingsPanel() {\r\n        return (\r\n            <div className=\"sidebar-panel sidebar-settings-panel\">\r\n                <div>Set Difficulty: {this.state.difficulty}</div>\r\n                <button \r\n                    onClick={this.handleDifficultyButton}\r\n                    value={DIFFICULTY.BEGINNER}\r\n                >\r\n                        {DIFFICULTY.BEGINNER}\r\n                </button>\r\n                <button \r\n                    onClick={this.handleDifficultyButton}\r\n                    value={DIFFICULTY.INTERMEDIATE}\r\n                >\r\n                    {DIFFICULTY.INTERMEDIATE}\r\n                </button>\r\n                <button \r\n                    onClick={this.handleDifficultyButton}\r\n                    value={DIFFICULTY.EXPERT}\r\n                >\r\n                    {DIFFICULTY.EXPERT}\r\n                </button>\r\n                <div>Rows: {this.state.rowInput}</div>\r\n                <input \r\n                    type=\"range\" \r\n                    min=\"9\" \r\n                    max=\"30\" \r\n                    id=\"rowInput\"\r\n                    value={this.state.rowInput} \r\n                    onChange={this.handleSliderChange}\r\n                />\r\n                <div>Columns: {this.state.colInput}</div>\r\n                <input \r\n                    type=\"range\" \r\n                    min=\"9\"\r\n                    max=\"30\" \r\n                    id=\"colInput\"\r\n                    value={this.state.colInput}\r\n                    onChange={this.handleSliderChange}\r\n                />\r\n                <div>Bombs: {this.state.bombInput}</div>\r\n                <input\r\n                    type=\"range\" \r\n                    min=\"10\" \r\n                    max=\"200\" \r\n                    id=\"bombInput\"\r\n                    value={this.state.bombInput} \r\n                    onChange={this.handleSliderChange}\r\n                />\r\n                <button onClick={this.handleNewGameButton}>\r\n                    Create New Game\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderCounter(toRender) {\r\n        let output = toRender;\r\n        if(output < 10) {\r\n            output = \"00\" + output.toString();\r\n        } else if(output < 100) {\r\n            output = \"0\" + output.toString();\r\n        } else if(output > 999) {\r\n            output = 999;\r\n        }\r\n        return output;\r\n    }\r\n\r\n    renderEmoji() {\r\n        let emojiState = this.state.emojiState;\r\n        let emoji = <span role=\"img\" aria-label=\"neutral face\">😐</span>;\r\n        if(emojiState === EMOJI_STATE.SMILE_SUNGLASSES) {\r\n            emoji = <span role=\"img\" aria-label=\"smiling face with sunglasses\">😎</span>\r\n        } else if(emojiState === EMOJI_STATE.SCREAM) {\r\n            emoji = <span role=\"img\" aria-label=\"face screaming in fear\">😱</span>\r\n        } else if(emojiState === EMOJI_STATE.SMILE) {\r\n            emoji = <span role=\"img\" aria-label=\"slightly smiling face\">🙂</span>\r\n        } else if(emojiState === EMOJI_STATE.OPEN_MOUTH) {\r\n            emoji = <span role=\"img\" aria-label=\"face with mouth open\">😮</span>\r\n        }\r\n        return emoji;\r\n    }\r\n\r\n    renderClickState() {\r\n        let icon = <div className=\"bomb\"></div>;\r\n        if(this.state.clickState === CLICK_STATE.FLAG) {\r\n            icon = <div className=\"flag\"></div>;\r\n        }\r\n        return icon;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"game-container\">\r\n                <div className=\"banner\">\r\n                    For the best experience please use the Google Chrome browser on a desktop or laptop. \r\n                    Updates to optimize for all browsers and devices may come in the future.\r\n                </div>\r\n                <div className=\"game\">\r\n                    <div className=\"game-status\">\r\n                        <div className=\"counter-panel\">\r\n                            {this.renderCounter(this.state.flagCounter)}\r\n                        </div>\r\n                        <div className=\"center-panel\">\r\n                            <button \r\n                                className=\"panel-tile\"\r\n                                onClick={this.handleEmojiButton}\r\n                            >\r\n                                {this.renderEmoji()}\r\n                                </button>\r\n                            <button \r\n                                className=\"panel-tile\"\r\n                                onClick={this.toggleClickState}\r\n                            >\r\n                                {this.renderClickState()}\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"counter-panel\">\r\n                            {this.renderCounter(this.state.timer)}\r\n                        </div>\r\n                    </div>\r\n                    <Board \r\n                        rows={this.state.gameState.rows} \r\n                        cols={this.state.gameState.cols}\r\n                        bombField={this.state.gameState.bombField}\r\n                        gameState={this.state.gameState.gameState}\r\n                        onClick={(e, r, c) => this.handleBoardClick(e, r, c)}\r\n                    />\r\n                </div>\r\n                {this.renderSidebar()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Game;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Game from './ms-react.js';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Game />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}